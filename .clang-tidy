# Targeting Clang Tidy 19
# Full list: https://clang.llvm.org/extra/clang-tidy/
# Disabled because...
# * clang-analyzer-security.insecureAPI.bzero -- bzero is used internally by system macros (e.g. FD_ZERO)
# * concurrency-mt-unsafe -- reports exit() etc., not going to fix that
# * readability-container-size-empty -- in Catch2 tests, comparing with empty string produces better failed test message
# * readability-qualified-auto -- wants to change `auto` to `const auto*` for `std::string_view::iterator` on Clang => that would be unportable
# * performance-no-int-to-ptr -- nothing found in our code, but warns about SIG_ERR macro content
Checks: >
  bugprone-*,
  -bugprone-assignment-in-if-condition,
  -bugprone-branch-clone,
  -bugprone-sizeof-expression,
  -bugprone-easily-swappable-parameters,
  -bugprone-exception-escape,
  -bugprone-implicit-widening-of-multiplication-result,
  -bugprone-switch-missing-default-case,
  -bugprone-inc-dec-in-conditions,
  -bugprone-multi-level-implicit-pointer-conversion,
  clang-analyzer-*,
  -clang-analyzer-deadcode.DeadStores,
  -clang-analyzer-security.insecureAPI.bzero,
  -clang-analyzer-optin.core.EnumCastOutOfRange,
  -clang-analyzer-unix.BlockInCriticalSection,
  clang-diagnostic-*,
  concurrency-*,
  -concurrency-mt-unsafe,
  cppcoreguidelines-interfaces-global-init,
  cppcoreguidelines-slicing,
  google-default-arguments,
  google-global-names-in-headers,
  google-runtime-operator,
  llvm-namespace-comment,
  misc-*,
  -misc-unused-parameters,
  -misc-non-private-member-variables-in-classes,
  -misc-no-recursion,
  -misc-use-anonymous-namespace,
  -misc-include-cleaner,
  modernize-*,
  -modernize-avoid-c-arrays,
  -modernize-deprecated-headers,
  -modernize-use-auto,
  -modernize-use-designated-initializers,
  -modernize-use-emplace,
  -modernize-use-nodiscard,
  -modernize-use-trailing-return-type,
  -modernize-return-braced-init-list,
  performance-*,
  -performance-avoid-endl,
  -performance-inefficient-string-concatenation,
  -performance-enum-size,
  portability-*,
  readability-*,
  -readability-implicit-bool-conversion,
  -readability-magic-numbers,
  -readability-braces-around-statements,
  -readability-make-member-function-const,
  -readability-redundant-access-specifiers,
  -readability-uppercase-literal-suffix,
  -readability-named-parameter,
  -readability-convert-member-functions-to-static,
  -readability-simplify-boolean-expr,
  -readability-container-size-empty,
  -readability-function-cognitive-complexity,
  -readability-else-after-return,
  -readability-qualified-auto,
  -readability-isolate-declaration,
  -readability-identifier-length,
  -readability-math-missing-parentheses,
  -readability-avoid-return-with-void-value,
  -readability-avoid-nested-conditional-operator,
  -readability-enum-initial-value,
  -readability-use-std-min-max,
  -readability-use-anyofallof
CheckOptions:
  bugprone-narrowing-conversions.WarnOnIntegerToFloatingPointNarrowingConversion: false
  bugprone-narrowing-conversions.WarnOnFloatingPointNarrowingConversion: false
  misc-const-correctness.AnalyzeValues: false
