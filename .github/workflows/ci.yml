name: CI
on: [push]

jobs:
  build:

    strategy:
      fail-fast: false
      matrix:
        include:
        - os: ubuntu-20.04
          name: "GCC 10 / Release"
          cc: gcc-10
          cxx: g++-10
          build_args: ""
        - os: ubuntu-20.04
          name: "Clang 10 / Release"
          cc: clang-10
          cxx: clang++-10
          build_args: ""
        - os: ubuntu-20.04
          name: "GCC 10 / Debug ASAN"
          cc: gcc-10
          cxx: g++-10
          build_args: "--debug -DBUILD_WITH_ASAN=1 -DBUILD_WITH_UBSAN=1"
        - os: macos-10.15
          name: "Clang (latest) / Release"
          build_args: ""
        - os: windows-2019
          name: "MSVC (latest) / Release"
          build_args: ""

    name: ${{ matrix.os }} / ${{ matrix.name }}

    runs-on: ${{ matrix.os }}

    env:
      CONAN_PASSWORD: ${{ secrets.CONAN_PASSWORD }}
      CONAN_REVISIONS_ENABLED: 1
      BUILD_ARGS: ${{ matrix.build_args }}

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
        architecture: 'x64'
    - uses: ilammy/msvc-dev-cmd@v1

    - name: cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.conan/data
        key: ${{ runner.os }}-${{ matrix.name }}-${{ hashFiles('conanfile.py') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.name }}-
          ${{ runner.os }}-

    - name: "install tools and deps"
      run: |
        if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install --no-install-recommends -y ninja-build \
                libglfw3-dev libfreetype6-dev libhyperscan-dev libbenchmark-dev
            export CC=${{ matrix.cc }}
            export CXX=${{ matrix.cxx }}
            echo "CC='$CC'" >> $GITHUB_ENV
            echo "CXX='$CXX'" >> $GITHUB_ENV
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install ccache ninja glfw doxygen google-benchmark hyperscan
            export CC="$(brew --prefix llvm)/bin/clang"
            export CXX="$(brew --prefix llvm)/bin/clang++"
            export MACOSX_DEPLOYMENT_TARGET=10.15
            echo "CC='$CC'" >> $GITHUB_ENV
            echo "CXX='$CXX'" >> $GITHUB_ENV
            echo "MACOSX_DEPLOYMENT_TARGET=$MACOSX_DEPLOYMENT_TARGET" >> $GITHUB_ENV
        elif [[ "$RUNNER_OS" == "Windows" ]]; then
            choco install ninja
            mv /usr/bin/link /usr/bin/link.orig
        fi
        pip3 --no-cache-dir install conan
        conan profile new default --detect --force
        conan profile update "settings.compiler.cppstd=20" default
        if [[ "$RUNNER_OS" == "Linux" ]]; then
            if [[ "$CXX" = clang* ]]; then
                conan profile update "settings.compiler.libcxx=libc++" default
                echo "CXXFLAGS=-stdlib=libc++" >> $GITHUB_ENV
            else
                conan profile update "settings.compiler.libcxx=libstdc++11" default
            fi
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
            conan profile update "settings.compiler.libcxx=libc++" default
            conan profile update "settings.os.version=$MACOSX_DEPLOYMENT_TARGET" default
        fi
      shell: bash

    - name: deps
      run: ./build.sh deps $BUILD_ARGS
      shell: bash

    - name: configure
      run: ./build.sh config $BUILD_ARGS
      shell: bash

    - name: build
      run: ./build.sh build $BUILD_ARGS
      shell: bash

    - name: test
      run: ./build.sh test $BUILD_ARGS
      shell: bash

    - name: install
      if: ${{ matrix.name == 'Release build' }}
      run: ./build.sh install $BUILD_ARGS
      shell: bash

    - name: package
      if: ${{ matrix.name == 'Release build' }}
      run: ./build.sh package $BUILD_ARGS
      shell: bash

    - name: artifacts - tarball
      if: ${{ matrix.name == 'Release build' }}
      uses: actions/upload-artifact@v2
      with:
        name: xcikit-artifacts
        path: |
          artifacts/xcikit-*.tar.gz

    - name: artifacts - test report
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2
      with:
        name: test-report
        path: |
          build/*/Testing/Temporary/LastTest.log

#    - name: deploy conan package
#      if: github.ref == 'refs/heads/master'
#      run: |
#        conan remote add xcikit https://api.bintray.com/conan/rbrich/xcikit
#        conan user -p $CONAN_PASSWORD -r xcikit rbrich
#        conan upload "xcikit/*@rbrich/stable" --all --no-overwrite --check --confirm -r=xcikit
#      shell: bash
