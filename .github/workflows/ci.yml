name: CI
on: [push]

defaults:
  run:
    shell: bash

jobs:
  build:

    strategy:
      fail-fast: false
      matrix:
        include:
        - os: ubuntu-20.04
          name: "GCC 10 / Release"
          cc: gcc-10
          cxx: g++-10
          build_args: ""
        - os: ubuntu-22.04
          name: "GCC 11 / Release"
          cc: gcc-11
          cxx: g++-11
          build_args: ""
        - os: ubuntu-22.04
          name: "GCC 12 / Release"
          cc: gcc-12
          cxx: g++-12
          build_args: ""
        - os: ubuntu-20.04
          name: "Clang 12 / Release"
          cc: clang-12
          cxx: clang++-12
          apt: libc++-12-dev libc++abi-12-dev
          build_args: ""
        - os: ubuntu-22.04
          name: "Clang 13 / Release"
          cc: clang-13
          cxx: clang++-13
          apt: libc++-13-dev libc++abi-13-dev
          build_args: ""
        - os: ubuntu-22.04
          name: "Clang 14 / Release"
          cc: clang-14
          cxx: clang++-14
          apt: libc++-14-dev libc++abi-14-dev
          build_args: ""
        - os: ubuntu-22.04
          name: "GCC 12 / Debug ASAN"
          cc: gcc-12
          cxx: g++-12
          build_args: "--debug --asan --ubsan"
        - os: ubuntu-20.04
          name: "GCC 10 / MinSizeRel Unity"
          cc: gcc-10
          cxx: g++-10
          build_args: "--minsize --unity"
        - os: macos-11
          name: "Clang 14 / Release"
          clang: llvm@14
          os_target: "11.0"
          build_args: ""
        - os: macos-11
          name: "Xcode 13.2 / Release"
          clang: Xcode_13.2.1
          os_target: "11.0"
          build_args: ""
        - os: macos-12
          name: "Xcode 14 / Release"
          clang: Xcode_14.0
          os_target: "12.0"
          build_args: ""
        - os: windows-2019
          name: "VS 16 / Release"
          build_args: "-DCMAKE_DISABLE_PRECOMPILE_HEADERS=1"
        - os: windows-2022
          name: "VS 17 / Release"
          build_args: "-DCMAKE_DISABLE_PRECOMPILE_HEADERS=1"

    name: ${{ matrix.os }} / ${{ matrix.name }}

    runs-on: ${{ matrix.os }}

    env:
      CONAN_PASSWORD: ${{ secrets.CONAN_PASSWORD }}
      CONAN_REVISIONS_ENABLED: 1
      BUILD_ARGS: ${{ matrix.build_args }}

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        architecture: 'x64'
    - uses: ilammy/msvc-dev-cmd@v1

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ matrix.os }}-${{ matrix.name }}

    - name: "install tools and deps"
      id: tools
      run: |
        if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install --no-install-recommends -y ninja-build \
                libglfw3-dev libfreetype6-dev libharfbuzz-dev libhyperscan-dev libbenchmark-dev \
                ${{ matrix.apt }}
            export CC=${{ matrix.cc }}
            export CXX=${{ matrix.cxx }}
            echo "CC='$CC'" >> $GITHUB_ENV
            echo "CXX='$CXX'" >> $GITHUB_ENV
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install ninja glfw doxygen google-benchmark hyperscan harfbuzz freetype
            if [[ "${{ matrix.clang }}" == llvm* ]] ; then
                export CC="$(brew --prefix ${{ matrix.clang }})/bin/clang"
                export CXX="$(brew --prefix ${{ matrix.clang }})/bin/clang++"
                echo "CC='$CC'" >> $GITHUB_ENV
                echo "CXX='$CXX'" >> $GITHUB_ENV
            else
                sudo xcode-select -s "/Applications/${{ matrix.clang }}.app"
            fi
            export MACOSX_DEPLOYMENT_TARGET=${{ matrix.os_target }}
            echo "MACOSX_DEPLOYMENT_TARGET=$MACOSX_DEPLOYMENT_TARGET" >> $GITHUB_ENV
        elif [[ "$RUNNER_OS" == "Windows" ]]; then
            # remove MinGW's link as it collides with MSVC
            mv /usr/bin/link /usr/bin/link.orig
        fi
        # Install conan
        pip3 --no-cache-dir install conan
        conan profile new default --detect --force
        conan profile update "settings.xcikit:compiler.cppstd=20" default
        conan profile update "settings.catch2:compiler.cppstd=20" default
        conan profile update "settings.fmt:compiler.cppstd=20" default
        conan profile update "settings.range-v3:compiler.cppstd=20" default
        conan profile update "settings.taocpp-pegtl:compiler.cppstd=20" default
        conan profile update "settings.magic_enum:compiler.cppstd=20" default
        conan profile update "settings.pfr:compiler.cppstd=20" default
        conan profile update "options.harfbuzz:with_glib=True" default
        conan profile update "options.freetype:with_bzip2=True" default
        conan profile update "options.freetype:with_brotli=True" default
        if [[ "$RUNNER_OS" == "Linux" ]]; then
            if [[ "$CXX" = clang* ]]; then
                conan profile update "settings.compiler.libcxx=libc++" default
                echo "CXXFLAGS=-stdlib=libc++" >> $GITHUB_ENV
            else
                conan profile update "settings.compiler.libcxx=libstdc++11" default
            fi
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
            conan profile update "settings.compiler.libcxx=libc++" default
            conan profile update "settings.os.version=$MACOSX_DEPLOYMENT_TARGET" default
        fi
        echo "CONAN_HOME=$(conan config home)" >> $GITHUB_OUTPUT

    - name: conan cache
      uses: actions/cache@v3
      with:
        path: ${{ steps.tools.outputs.CONAN_HOME }}/data
        key: ${{ matrix.os }}-${{ matrix.name }}-${{ hashFiles('conanfile.py', 'conandata.yml') }}-${{github.sha}}
        restore-keys: |
          ${{ matrix.os }}-${{ matrix.name }}-${{ hashFiles('conanfile.py', 'conandata.yml') }}-
          ${{ matrix.os }}-${{ matrix.name }}-
          ${{ matrix.os }}-

    - name: conan workaround - glib fails as build requirement (conan-center-index/issues/14125)
      if: ${{ matrix.os == 'windows-2022' }}
      run: conan install --build missing -pr=default -pr:b=default glib/2.75.0@

    - name: deps
      run: ./build.sh deps $BUILD_ARGS

    - name: configure
      run: ./build.sh config $BUILD_ARGS

    - name: build
      run: ./build.sh build $BUILD_ARGS

    - name: test
      run: ./build.sh test $BUILD_ARGS

    - name: install
      if: ${{ matrix.name == 'Release build' }}
      run: ./build.sh install $BUILD_ARGS

    - name: package
      if: ${{ matrix.name == 'Release build' }}
      run: ./build.sh package $BUILD_ARGS

    - name: artifacts - tarball
      if: ${{ matrix.name == 'Release build' }}
      uses: actions/upload-artifact@v3
      with:
        name: xcikit-artifacts
        path: |
          artifacts/xcikit-*.tar.gz

    - name: artifacts - test report
      if: ${{ failure() }}
      uses: actions/upload-artifact@v3
      with:
        name: test-report
        path: |
          build/*/Testing/Temporary/LastTest.log

#    - name: deploy conan package
#      if: github.ref == 'refs/heads/master'
#      run: |
#        conan remote add xcikit https://api.bintray.com/conan/rbrich/xcikit
#        conan user -p $CONAN_PASSWORD -r xcikit rbrich
#        conan upload "xcikit/*@rbrich/stable" --all --no-overwrite --check --confirm -r=xcikit
