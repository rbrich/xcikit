#!/usr/bin/env bash

set -e
cd "$(dirname "$0")"

ROOT_DIR="$PWD"
TIDY=0
CLANG_TIDY=${CLANG_TIDY:-clang-tidy}

print_usage()
{
    echo "Usage: ./check.sh [--tidy]"
}

# parse args...
while [[ $# -gt 0 ]] ; do
    case "$1" in
        --tidy )
            TIDY=1
            shift 1 ;;
        * )
            printf 'Error: Unknown option: %s\n\n' "$1"
            print_usage
            exit 1 ;;
    esac
done

if [[ "${TIDY}" -eq 1 ]] ; then
    echo "=== Clang-Tidy ==="
    # Run clan-tidy directly. It uses compilation DB generated by latest build.
    # The alternative is to run Tidy together with build: `./build.sh --tidy`
    if command -v "${CLANG_TIDY}" >/dev/null; then
        # Find most recent compilation database
        # shellcheck disable=SC2012
        LAST_BUILD_CMDS=$(ls -t "${ROOT_DIR}"/build/*/compile_commands.json | head -n1)
        if [[ -n "${LAST_BUILD_CMDS}" ]] ; then
            BUILD_DIR="$(dirname "${LAST_BUILD_CMDS}")"
            SRC_DIR="${ROOT_DIR}/src"
            find "${SRC_DIR}" -name '*.cpp' \
                -exec grep -q '{}' "${LAST_BUILD_CMDS}" ';' \
                -exec "${CLANG_TIDY}" --quiet --header-filter="${SRC_DIR}" -p="${BUILD_DIR}" \
                    '{}' ';' 2> >(grep -v 'warnings generated' >&2)
        fi
    else
        echo "Error: clang-tidy not found. Set env CLANG_TIDY."
        exit 1
    fi
fi

echo "=== ShellCheck ==="
if command -v shellcheck >/dev/null; then
    find . \( -path ./build -o -path ./artifacts \) -prune -o \
        -type f -name '*.sh' -print0 | xargs -0 shellcheck
else
    echo "[skipped] shellcheck not found"
fi

echo "=== Done ==="
